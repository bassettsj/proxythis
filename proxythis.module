<?php
/**
 * @file proxythis.module
 */


/**
 * Implements hook_libraries_info().
 */
function proxythis_libraries_info() {
  $libraries['ZeroClipboard'] = array(
    'name' => 'ZeroClipboard',
    'vendor url' => 'https://github.com/jonrohan/ZeroClipboard',
    'download url' => 'https://github.com/jonrohan/ZeroClipboard',
    'version arguments' => array(
      'file' => 'ZeroClipboard.min.js',
      // 2.x: jQuery Masonry v2.1.05
      'pattern' => '/v?([0-9\.]+)/',
      'lines' => 7,
    ),
    'files' => array(
      'js' => array('ZeroClipboard.min.js'),
      'swf' => array('ZeroClipboard.swf'),
    ),
  );

  return $libraries;
}



/**
 * render furntion for hook_menu();
 */
function proxythis_view(){
  $form =  drupal_get_form('proxythis_form');
  return $form;
}
/**
 * Rendre funation for the form to be submitted.
 */

function proxythis_form($form, &$form_state){
  $form['url'] = array(
      '#title' => t('URL to be Converted'),
      '#type' => 'textfield',
      '#requiered' => TRUE,
      '#attributes' => array(
        'placeholder' =>'http://www.example.com'
        ),
      '#size' => 45,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'submit',
      '#weight' => 11, 
    );
  if($form_state['submitted']){
    //Load the library.
    
    $zclip = libraries_load('ZeroClipboard');
    $proxythis_js_init = 'jQuery(document).ready(function($) {
        var clip = new ZeroClipboard($("#copy-dynamic"), {
          moviePath: "' . $zclip['library path'] .'/'. $zclip['files']['swf'][0] .'",
        });
      });';

    //stating a shorted variable
    $modUrl = variable_get('proxythis_pattern', $default = 'http://ezproxy.neu.edu/login?url=') . $form_state['values']['url'];

    $form['url']['#disabled'] = TRUE;
    $form['url']['#title'] = t('Original URL');
    $form['url']['#attributes']['value'] = $form_state['values']['url'];
    $form['result'] = array(
        '#title' => t('Converted URL'),
        '#type' => 'textfield',
        '#disabled' => TRUE,
        '#attributes'=> array(
          'value' => $modUrl,
          ),
        '#weight' => 10,
        '#size' => 45,
      );
    //get the module install path
    $form['#attached']['js']= array(
       $proxythis_js_init => array(
        'type' => 'inline'
        )
      );
    $form['copy_link'] = array(
        '#markup' => '<a href="#" id="copy-dynamic" data-clipboard-text="'.$modUrl.'">' . t('Copy to Clipboard') . '</a>',
        '#weight' => 12, 
      );
    $form['reset'] = array(
        '#markup' => '<a href="#" onClick="window.location.reload();">Reset</a>',
        '#weight' => 200,
      );
    $form['submit']['#attributes']['style'] = 'display:none';
  } //end if form submitted  
  return $form;
}

/**
 * Submit function for proxythis_form()
 */
function proxythis_form_submit($form, &$form_state){
  $form_state['rebuild'] = TRUE;
}

/**
 * Validation function for proxythis_form()
 */
function proxythis_form_validate($form, &$form_state){
  

  $url = $form_state['values']['url'];
  
  //check to see if the string starts with  http:// or https://. If it doesn't lets add a http://
  // @todo: add a better way to check the url.
  if (0 !== stripos($url, 'http://') || 0 !== stripos($url, 'https://')){
    $url = 'http://'.$url;
  }
  
  //check to see if the string already begins with the pattern.
  if(preg_match(variable_get('proxythis_regex_validation'), $url) ){
    form_set_error('url',t('This URL is already proxied, no change needed!'));
  }

  //check to see if it is a valid url.
  if(!filter_var($url, FILTER_VALIDATE_URL)){
    form_set_error('url',t('Please provide a valid url.'));
  }
  
  //check to see if the string was proxied from the old pattern then replace it.
  if (preg_match("/\.ilsprod\.lib\.neu\.edu/", $url)){
    $url = preg_replace("/\.ilsprod\.lib\.neu\.edu/", '', $url);
    $url = preg_replace("/:\/\/[0-9]-/", "://", $url);
  }


  return $form_state['values']['url'] = $url;
}


/**
 * Implements hook_block_info().
 */
function proxythis_block_info() {
  $blocks = array();

  $blocks['proxythis'] = array(
      'info' => t('Proxy this - URL Converter'),
      'status' => 0,
    );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function proxythis_block_view($delta = '') {
  $blocks = array();

  switch($delta){
    case 'proxythis':
      $block['content'] = proxythis_view();
      break;
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function proxythis_block_configure($delta = '') {
  $form = array();
  if ($delta == 'proxythis'){
    $form['proxythis_regex_search'] = array(
      '#type' => 'textfield',
      '#title' => t('Regular expression pattern to search the form input.'),
      '#default_value' => variable_get('proxythis_regex_search', $default = 'http://ezproxy.neu.edu/login?url='),
      //'#description' => t('Adds to the front of the resource link.'),
      );
    $form['proxythis_regex_replace'] = array(
      '#type' => 'textfield',
      '#title' => t('Regular expression pattern to replace the form input.'),
      '#default_value' => variable_get('proxythis_regex_replace', $default = 'http://ezproxy.neu.edu/login?url='),
      //'#description' => t('Adds to the front of the resource link.'),
      );
    $form['proxythis_regex_validation'] = array(
      '#type' => 'textfield',
      '#title' => t('The regular expression to test to see if the url is already proxied.'),
      '#default_value' => variable_get('proxythis_regex_validation', $default = 'http://ezproxy.neu.edu/login?url='),
      //'#description' => t('Adds to the front of the resource link.'),
      );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function proxythis_block_save($delta = '', $edit = array()) {
  if($delta == 'proxythis'){
    variable_set('proxythis_regex_search', $edit['proxythis_regex_search']);
    variable_set('proxythis_regex_replace', $edit['proxythis_regex_replace']);
    variable_set('proxythis_regex_validation', $edit['proxythis_regex_validation']);
  }
}







